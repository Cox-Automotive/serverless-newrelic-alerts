// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Newrelic Alert Plugin getApiGatewayAlertsCloudFormation should generate alerts for all api gateways 1`] = `
Object {
  "ApiGateway4XxErrorsInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "ApiGatewaySample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "apiName": Array [
                  "api-gatway",
                  "api-gatway2",
                ],
              },
            },
          ],
        },
        "name": "TestService TEST - Api Gateway 4 XX Errors",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.4xxError.Sum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
  "ApiGateway5XxErrorsInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "ApiGatewaySample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "apiName": Array [
                  "api-gatway",
                  "api-gatway2",
                ],
              },
            },
          ],
        },
        "name": "TestService TEST - Api Gateway 5 XX Errors",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.5xxError.Sum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
}
`;

exports[`Newrelic Alert Plugin getDynamoDbAlertsCloudFormation should generate alerts for all dynamo tables 1`] = `
Object {
  "DynamoDbBatchGetSystemErrorsInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "DatastoreSample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "tableName": Array [
                  "dynamo-table",
                  "dynamo-table2",
                ],
              },
            },
          ],
        },
        "integration_provider": "DynamoDbTable",
        "name": "TestService TEST - Dynamo Db Batch Get System Errors",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.batchGetSystemErrors.Sum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
  "DynamoDbBatchWriteSystemErrorsInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "DatastoreSample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "tableName": Array [
                  "dynamo-table",
                  "dynamo-table2",
                ],
              },
            },
          ],
        },
        "integration_provider": "DynamoDbTable",
        "name": "TestService TEST - Dynamo Db Batch Write System Errors",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.batchWriteSystemErrors.Sum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
  "DynamoDbDeleteSystemErrorsInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "DatastoreSample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "tableName": Array [
                  "dynamo-table",
                  "dynamo-table2",
                ],
              },
            },
          ],
        },
        "integration_provider": "DynamoDbTable",
        "name": "TestService TEST - Dynamo Db Delete System Errors",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.deleteSystemErrors.Sum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
  "DynamoDbGetSystemErrorsInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "DatastoreSample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "tableName": Array [
                  "dynamo-table",
                  "dynamo-table2",
                ],
              },
            },
          ],
        },
        "integration_provider": "DynamoDbTable",
        "name": "TestService TEST - Dynamo Db Get System Errors",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.getSystemErrors.Sum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
  "DynamoDbPutSystemErrorsInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "DatastoreSample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "tableName": Array [
                  "dynamo-table",
                  "dynamo-table2",
                ],
              },
            },
          ],
        },
        "integration_provider": "DynamoDbTable",
        "name": "TestService TEST - Dynamo Db Put System Errors",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.putSystemErrors.Sum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
  "DynamoDbQuerySystemErrorsInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "DatastoreSample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "tableName": Array [
                  "dynamo-table",
                  "dynamo-table2",
                ],
              },
            },
          ],
        },
        "integration_provider": "DynamoDbTable",
        "name": "TestService TEST - Dynamo Db Query System Errors",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.querySystemErrors.Sum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
  "DynamoDbScanSystemErrorsInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "DatastoreSample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "tableName": Array [
                  "dynamo-table",
                  "dynamo-table2",
                ],
              },
            },
          ],
        },
        "integration_provider": "DynamoDbTable",
        "name": "TestService TEST - Dynamo Db Scan System Errors",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.scanSystemErrors.Sum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
  "DynamoDbUpdateSystemErrorsInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "DatastoreSample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "tableName": Array [
                  "dynamo-table",
                  "dynamo-table2",
                ],
              },
            },
          ],
        },
        "integration_provider": "DynamoDbTable",
        "name": "TestService TEST - Dynamo Db Update System Errors",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.updateSystemErrors.Sum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
  "DynamoDbUserErrorsInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "DatastoreSample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "tableName": Array [
                  "dynamo-table",
                  "dynamo-table2",
                ],
              },
            },
          ],
        },
        "integration_provider": "DynamoDbTable",
        "name": "TestService TEST - Dynamo Db User Errors",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.userErrors.Sum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
}
`;

exports[`Newrelic Alert Plugin getFunctionAlertsCloudFormation should generate global alerts for all functions 1`] = `
Object {
  "FunctionDuration1SecInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 1000,
        },
        "enabled": true,
        "event_type": "ServerlessSample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "displayName": Array [
                  "test-service-test-function",
                  "test-service-test-function-2",
                ],
              },
            },
          ],
        },
        "integration_provider": "LambdaFunction",
        "name": "TestService TEST - Function Duration 1 Sec",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.duration.Maximum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
  "FunctionErrorsInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "ServerlessSample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "displayName": Array [
                  "test-service-test-function",
                  "test-service-test-function-2",
                ],
              },
            },
          ],
        },
        "integration_provider": "LambdaFunction",
        "name": "TestService TEST - Function Errors",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.errors.Sum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
  "FunctionThrottlesInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "ServerlessSample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "displayName": Array [
                  "test-service-test-function",
                  "test-service-test-function-2",
                ],
              },
            },
          ],
        },
        "integration_provider": "LambdaFunction",
        "name": "TestService TEST - Function Throttles",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.throttles.Maximum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
}
`;

exports[`Newrelic Alert Plugin getFunctionAlertsCloudFormation should generate local defined alerts functions 1`] = `
Object {
  "and": Array [
    Object {
      "in": Object {
        "displayName": Array [
          "test-service-test-function-2",
        ],
      },
    },
  ],
}
`;

exports[`Newrelic Alert Plugin getFunctionAlertsCloudFormation shouldn't generate global alerts for function if alert disabled locally 1`] = `
Object {
  "and": Array [
    Object {
      "in": Object {
        "displayName": Array [
          "test-service-test-function",
        ],
      },
    },
  ],
}
`;

exports[`Newrelic Alert Plugin getInfrastructureConditionCloudFormation should generate valid infrastructure condition 1`] = `
Object {
  "FunctionThrottlesInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "ServerlessSample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "displayName": Array [
                  "fn-1",
                  "fn-2",
                ],
              },
            },
          ],
        },
        "integration_provider": "LambdaFunction",
        "name": "TestService TEST - Function Throttles",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.throttles.Maximum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
}
`;

exports[`Newrelic Alert Plugin getPolicyCloudFormation should generate valid policy 1`] = `
Object {
  "TestServiceNewRelicPolicy": Object {
    "Properties": Object {
      "ServiceToken": "policy-token",
      "policy": Object {
        "incident_preference": "PER_POLICY",
        "name": "TestService TEST",
      },
    },
    "Type": "Custom::NewRelicPolicy",
  },
}
`;

exports[`Newrelic Alert Plugin getSqsAlertsCloudFormation should generate alerts for all dead letter queues 1`] = `
Object {
  "SqsDlqVisibleMessagesInfrastructureCondition": Object {
    "Properties": Object {
      "ServiceToken": "infrastructure-condition-token",
      "data": Object {
        "comparison": "above",
        "critical_threshold": Object {
          "duration_minutes": 5,
          "time_function": "all",
          "value": 3,
        },
        "enabled": true,
        "event_type": "QueueSample",
        "filter": Object {
          "and": Array [
            Object {
              "in": Object {
                "queueName": Array [
                  "simple-queue-dlq",
                ],
              },
            },
          ],
        },
        "integration_provider": "SqsQueue",
        "name": "TestService TEST - Sqs Dlq Visible Messages",
        "policy_id": Object {
          "Ref": "TestServiceNewRelicPolicy",
        },
        "select_value": "provider.approximateNumberOfMessagesVisible.Maximum",
        "type": "infra_metric",
        "violation_close_timer": undefined,
      },
      "policy_id": Object {
        "Ref": "TestServiceNewRelicPolicy",
      },
    },
    "Type": "Custom::NewRelicInfrastructureCondition",
  },
}
`;
